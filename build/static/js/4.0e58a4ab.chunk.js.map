{"version":3,"sources":["../node_modules/bs58/index.js","../node_modules/bs58check/index.js","../node_modules/bs58check/base.js","../node_modules/bnc-onboard/dist/esm/hd-wallet-642b97e3.js","../node_modules/hdkey/lib/hdkey.js"],"names":["basex","require","module","exports","createHash","bs58checkBase","buffer","tmp","update","digest","base58","Buffer","checksumFn","decodeRaw","payload","slice","checksum","newChecksum","encode","concat","length","decode","string","Error","decodeUnsafe","publicToAddress","ethUtil","toChecksumAddress","generateAddresses","account","offset","publicKey","chainCode","path","hdk","HDKey","addresses","i","dkey","deriveChild","address","toString","push","dPath","isValidPath","parts","split","undefined","accountFieldDigit","Number","isNaN","changeFieldDigit","addressFieldDigit","assert","crypto","bs58check","secp256k1","MASTER_SECRET","from","HARDENED_OFFSET","BITCOIN_VERSIONS","private","public","versions","this","depth","index","_privateKey","_publicKey","_fingerprint","parentFingerprint","serialize","hdkey","version","key","allocUnsafe","writeUInt32BE","writeUInt8","fingerprint","copy","hash160","buf","sha","Object","defineProperty","prototype","get","_identifier","identifier","set","value","equal","privateKeyVerify","publicKeyCreate","readUInt32BE","publicKeyVerify","publicKeyConvert","alloc","privateKey","derive","entries","forEach","c","hardened","childIndex","parseInt","test","data","isHardened","indexBuffer","pk","zb","I","createHmac","IL","IR","hd","privateKeyTweakAdd","err","publicKeyTweakAdd","sign","hash","ecdsaSign","signature","verify","ecdsaVerify","Uint8Array","wipePrivateData","randomBytes","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","readUInt8","fromJSON","obj"],"mappings":"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","file":"static/js/4.0e58a4ab.chunk.js","sourcesContent":["var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n\nvar createHash = require('create-hash')\nvar bs58checkBase = require('./base')\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  var tmp = createHash('sha256').update(buffer).digest()\n  return createHash('sha256').update(tmp).digest()\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n","'use strict'\n\nvar base58 = require('bs58')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var checksum = checksumFn(payload)\n\n    return base58.encode(Buffer.concat([\n      payload,\n      checksum\n    ], payload.length + 4))\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n","import HDKey from 'hdkey';\nimport * as ethUtil from 'ethereumjs-util';\nimport { Buffer } from 'buffer';\nvar publicToAddress = ethUtil.publicToAddress,\n    toChecksumAddress = ethUtil.toChecksumAddress;\nvar numberToGet = 5;\n\nfunction generateAddresses(account, offset) {\n  var publicKey = account.publicKey,\n      chainCode = account.chainCode,\n      path = account.path;\n  var hdk = new HDKey();\n  hdk.publicKey = new Buffer(publicKey, 'hex');\n  hdk.chainCode = new Buffer(chainCode, 'hex');\n  var addresses = [];\n\n  for (var i = offset; i < numberToGet + offset; i++) {\n    var dkey = hdk.deriveChild(i);\n    var address = publicToAddress(dkey.publicKey, true).toString('hex');\n    addresses.push({\n      dPath: \"\".concat(path, \"/\").concat(i),\n      address: toChecksumAddress(\"0x\".concat(address))\n    });\n  }\n\n  return addresses;\n}\n\nfunction isValidPath(path) {\n  var parts = path.split('/');\n\n  if (parts[0] !== 'm') {\n    return false;\n  }\n\n  if (parts[1] !== \"44'\") {\n    return false;\n  }\n\n  if (parts[2] !== \"60'\" && parts[2] !== \"1'\") {\n    return false;\n  }\n\n  if (parts[3] === undefined) {\n    return true;\n  }\n\n  var accountFieldDigit = Number(parts[3][0]);\n\n  if (isNaN(accountFieldDigit) || accountFieldDigit < 0 || parts[3][1] !== \"'\") {\n    return false;\n  }\n\n  if (parts[4] === undefined) {\n    return true;\n  }\n\n  var changeFieldDigit = Number(parts[4][0]);\n\n  if (isNaN(changeFieldDigit) || changeFieldDigit < 0) {\n    return false;\n  }\n\n  if (parts[5] === undefined) {\n    return true;\n  }\n\n  var addressFieldDigit = Number(parts[5][0]);\n\n  if (isNaN(addressFieldDigit) || addressFieldDigit < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport { generateAddresses, isValidPath };","var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar bs58check = require('bs58check')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = Buffer.from(secp256k1.publicKeyCreate(value, true))\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = Buffer.from(secp256k1.publicKeyConvert(value, true)) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(this.privateKey), IL))\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(this.publicKey), IL, true))\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return Buffer.from(secp256k1.ecdsaSign(hash, this.privateKey).signature)\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.ecdsaVerify(\n    Uint8Array.from(signature),\n    Uint8Array.from(hash),\n    Uint8Array.from(this.publicKey)\n  )\n}\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey)\n  this._privateKey = null\n  return this\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = bs58check.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('ripemd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n"],"sourceRoot":""}